#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS
#define SIZE 3  // 3x3 행렬을 정의하기 위한 매크로

// 행렬 덧셈
void matrixAdd(int a[][SIZE], int b[][SIZE], int c[][SIZE]) {
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            c[i][j] = a[i][j] + b[i][j];
}

// 스칼라 곱
void scalarMultiply(int a[][SIZE], int scalar, int c[][SIZE]) {
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            c[i][j] = a[i][j] * scalar;
}

// 행렬 출력
void printMatrix(int a[][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%5d", a[i][j]);
        }
        printf("\n");
    }
}

// 행렬 입력
void readMatrix(int a[][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            scanf_s("%d", &a[i][j]);
        }
    }
}

int main(void) {
    int A[SIZE][SIZE], B[SIZE][SIZE], C[SIZE][SIZE];

    printf("(3 x 3) 행렬 A 입력 : \n");
    readMatrix(A);
    printf("(3 x 3) 행렬 B 입력: \n");
    readMatrix(B);

    matrixAdd(A, B, C);
    printf("행렬 A와 B의 합:\n");
    printMatrix(C);

    int scalar;
    printf("스칼라 곱을 위한 스칼라 값 입력: ");
    scanf_s("%d", &scalar);

    scalarMultiply(A, scalar, C);
    printf("행렬 A에 대한 스칼라 곱:\n");
    printMatrix(C);

    scalarMultiply(B, scalar, C);
    printf("행렬 B에 대한 스칼라 곱:\n");
    printMatrix(C);

    return 0;
}
